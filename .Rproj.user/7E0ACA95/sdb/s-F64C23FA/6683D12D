{
    "contents" : "#' Function to sort data according to ie output (following the ape tree structure)\n#'\n#' This function sorts extant and nodal values according the ape tree structure\n#' @param data_nodes named vector of ancestral states\n#' @return object with extant and nodal values sorted according to the ape tree structure\n#' @export\nieObject<-function(tree,data_extants,data_nodes){\n\n#Create general structure based on tree in ape format\n            matrix=tree$edge\n            phy.matrix=data.frame(tree$edge,tree$edge.length,data_extants[matrix[,2]],data_extants[matrix[,2]])\n            names(phy.matrix)=c(\"node_anc\",\"node_desc\",\"BL\",\"value_anc\",\"value_desc\")\n#Add ancestors to value_desc\n                  for(i in 1:length(names(data_nodes))){\n                        phy.matrix$value_desc[which(phy.matrix$node_desc==names(data_nodes[i]))]<-data_nodes[[i]]\n                  }\n#Fill in value_anc\n                  for(i in 1:length(names(data_nodes))){\n                        phy.matrix$value_anc[which(phy.matrix$node_anc==names(data_nodes[i]))]<-data_nodes[[i]]\n                  }\n#Add rate and change\n                  phy.matrix$rate<-(phy.matrix$value_desc-phy.matrix$value_anc)/sqrt(phy.matrix$BL)\n                  phy.matrix$change<-(phy.matrix$value_desc-phy.matrix$value_anc)\n#branching times of ancestral nodes\n      times<-branching.times(tree)\n      time_node_anc<-c()\n      for (i in phy.matrix$node_anc){\n      time_node_anc<-append(time_node_anc,times[which(names(times)==i)])}\n      phy.matrix$time_node_anc<-time_node_anc\n\nreturn(phy.matrix)\n}\n",
    "created" : 1423075668112.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2484541250",
    "id" : "6683D12D",
    "lastKnownWriteTime" : 1423007339,
    "path" : "~/Google Drive/Research Projects/CURRENT_Smaers R Package/Evomap_Github/R/ieObject.r",
    "project_path" : "R/ieObject.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}